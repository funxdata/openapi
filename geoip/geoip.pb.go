// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: geoip.proto

package geoip

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GeoInfo struct {
	Ip       string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Country  string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Province string `protobuf:"bytes,3,opt,name=province,proto3" json:"province,omitempty"`
	City     string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Region   string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	Isp      string `protobuf:"bytes,6,opt,name=isp,proto3" json:"isp,omitempty"`
	CityId   int64  `protobuf:"varint,7,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
}

func (m *GeoInfo) Reset()         { *m = GeoInfo{} }
func (m *GeoInfo) String() string { return proto.CompactTextString(m) }
func (*GeoInfo) ProtoMessage()    {}
func (*GeoInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a5b7ee991490f54, []int{0}
}
func (m *GeoInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoInfo.Merge(m, src)
}
func (m *GeoInfo) XXX_Size() int {
	return m.Size()
}
func (m *GeoInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GeoInfo proto.InternalMessageInfo

func (m *GeoInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GeoInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *GeoInfo) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *GeoInfo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *GeoInfo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *GeoInfo) GetIsp() string {
	if m != nil {
		return m.Isp
	}
	return ""
}

func (m *GeoInfo) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

type IP struct {
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *IP) Reset()         { *m = IP{} }
func (m *IP) String() string { return proto.CompactTextString(m) }
func (*IP) ProtoMessage()    {}
func (*IP) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a5b7ee991490f54, []int{1}
}
func (m *IP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IP.Merge(m, src)
}
func (m *IP) XXX_Size() int {
	return m.Size()
}
func (m *IP) XXX_DiscardUnknown() {
	xxx_messageInfo_IP.DiscardUnknown(m)
}

var xxx_messageInfo_IP proto.InternalMessageInfo

func (m *IP) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func init() {
	proto.RegisterType((*GeoInfo)(nil), "funxdata.openapi.GeoInfo")
	proto.RegisterType((*IP)(nil), "funxdata.openapi.IP")
}

func init() { proto.RegisterFile("geoip.proto", fileDescriptor_9a5b7ee991490f54) }

var fileDescriptor_9a5b7ee991490f54 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0x2b, 0x31,
	0x14, 0x86, 0x27, 0xd3, 0x76, 0xe6, 0x36, 0x85, 0x4b, 0x6f, 0x28, 0xd7, 0x38, 0x48, 0x28, 0x5d,
	0x75, 0x35, 0x41, 0xdd, 0x08, 0xee, 0xdc, 0x94, 0x01, 0x17, 0xa5, 0xe0, 0xa6, 0x1b, 0x99, 0x4e,
	0xd3, 0x21, 0xa8, 0x39, 0x61, 0x26, 0x2d, 0x76, 0xeb, 0x13, 0x08, 0xbe, 0x83, 0xcf, 0xd2, 0x65,
	0xc1, 0x8d, 0x4b, 0xed, 0xf8, 0x20, 0x92, 0xb4, 0x2a, 0xd4, 0xdd, 0xff, 0x7d, 0x49, 0x0e, 0x27,
	0x3f, 0x6e, 0xe5, 0x02, 0xa4, 0x8e, 0x75, 0x01, 0x06, 0x48, 0x7b, 0x36, 0x57, 0xf7, 0xd3, 0xd4,
	0xa4, 0x31, 0x68, 0xa1, 0x52, 0x2d, 0xa3, 0xa3, 0x1c, 0x20, 0xbf, 0x15, 0x3c, 0xd5, 0x92, 0xa7,
	0x4a, 0x81, 0x49, 0x8d, 0x04, 0x55, 0x6e, 0xef, 0x47, 0x9d, 0x1c, 0x72, 0x70, 0x91, 0xdb, 0xb4,
	0xb5, 0xbd, 0x67, 0x84, 0xc3, 0x81, 0x80, 0x44, 0xcd, 0x80, 0xfc, 0xc5, 0xbe, 0xd4, 0x14, 0x75,
	0x51, 0xbf, 0x39, 0xf2, 0xa5, 0x26, 0x14, 0x87, 0x19, 0xcc, 0x95, 0x29, 0x96, 0xd4, 0x77, 0xf2,
	0x0b, 0x49, 0x84, 0xff, 0xe8, 0x02, 0x16, 0x52, 0x65, 0x82, 0xd6, 0xdc, 0xd1, 0x37, 0x13, 0x82,
	0xeb, 0x99, 0x34, 0x4b, 0x5a, 0x77, 0xde, 0x65, 0xf2, 0x1f, 0x07, 0x85, 0xc8, 0x25, 0x28, 0xda,
	0x70, 0x76, 0x47, 0xa4, 0x8d, 0x6b, 0xb2, 0xd4, 0x34, 0x70, 0xd2, 0x46, 0x72, 0x80, 0x43, 0xfb,
	0xe2, 0x5a, 0x4e, 0x69, 0xd8, 0x45, 0xfd, 0xda, 0x28, 0xb0, 0x98, 0x4c, 0x7b, 0x1d, 0xec, 0x27,
	0xc3, 0xfd, 0x15, 0x4f, 0xae, 0x70, 0xc3, 0x6e, 0x3f, 0x24, 0x97, 0x38, 0x18, 0x08, 0x33, 0x10,
	0x40, 0x3a, 0xf1, 0x7e, 0x31, 0x71, 0x32, 0x8c, 0x0e, 0x7f, 0xdb, 0xdd, 0xb7, 0x7b, 0xff, 0x1e,
	0x5e, 0x3e, 0x9e, 0xfc, 0x16, 0x69, 0xf2, 0xc5, 0x31, 0x77, 0x0d, 0x5f, 0x8c, 0x57, 0xef, 0x0c,
	0xad, 0x36, 0x0c, 0xad, 0x37, 0x0c, 0xbd, 0x6d, 0x18, 0x7a, 0xac, 0x98, 0xb7, 0xaa, 0x98, 0xb7,
	0xae, 0x98, 0xf7, 0x5a, 0x31, 0x6f, 0x7c, 0x96, 0x4b, 0xf3, 0x33, 0x32, 0x83, 0x3b, 0x3e, 0x29,
	0x64, 0x79, 0x63, 0xbb, 0x2f, 0x45, 0xb1, 0x10, 0x05, 0x4f, 0xb5, 0xde, 0x4e, 0xe3, 0x56, 0xc8,
	0x4c, 0x9c, 0x3b, 0x9a, 0x04, 0xae, 0xf8, 0xd3, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x10,
	0x19, 0x1c, 0xcd, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GeoIPClient is the client API for GeoIP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeoIPClient interface {
	GetGeo(ctx context.Context, in *IP, opts ...grpc.CallOption) (*GeoInfo, error)
}

type geoIPClient struct {
	cc *grpc.ClientConn
}

func NewGeoIPClient(cc *grpc.ClientConn) GeoIPClient {
	return &geoIPClient{cc}
}

func (c *geoIPClient) GetGeo(ctx context.Context, in *IP, opts ...grpc.CallOption) (*GeoInfo, error) {
	out := new(GeoInfo)
	err := c.cc.Invoke(ctx, "/funxdata.openapi.GeoIP/GetGeo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoIPServer is the server API for GeoIP service.
type GeoIPServer interface {
	GetGeo(context.Context, *IP) (*GeoInfo, error)
}

// UnimplementedGeoIPServer can be embedded to have forward compatible implementations.
type UnimplementedGeoIPServer struct {
}

func (*UnimplementedGeoIPServer) GetGeo(ctx context.Context, req *IP) (*GeoInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeo not implemented")
}

func RegisterGeoIPServer(s *grpc.Server, srv GeoIPServer) {
	s.RegisterService(&_GeoIP_serviceDesc, srv)
}

func _GeoIP_GetGeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoIPServer).GetGeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funxdata.openapi.GeoIP/GetGeo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoIPServer).GetGeo(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeoIP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "funxdata.openapi.GeoIP",
	HandlerType: (*GeoIPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGeo",
			Handler:    _GeoIP_GetGeo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geoip.proto",
}

func (m *GeoInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CityId != 0 {
		i = encodeVarintGeoip(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Isp) > 0 {
		i -= len(m.Isp)
		copy(dAtA[i:], m.Isp)
		i = encodeVarintGeoip(dAtA, i, uint64(len(m.Isp)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintGeoip(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintGeoip(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Province) > 0 {
		i -= len(m.Province)
		copy(dAtA[i:], m.Province)
		i = encodeVarintGeoip(dAtA, i, uint64(len(m.Province)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintGeoip(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintGeoip(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintGeoip(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGeoip(dAtA []byte, offset int, v uint64) int {
	offset -= sovGeoip(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GeoInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovGeoip(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovGeoip(uint64(l))
	}
	l = len(m.Province)
	if l > 0 {
		n += 1 + l + sovGeoip(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovGeoip(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovGeoip(uint64(l))
	}
	l = len(m.Isp)
	if l > 0 {
		n += 1 + l + sovGeoip(uint64(l))
	}
	if m.CityId != 0 {
		n += 1 + sovGeoip(uint64(m.CityId))
	}
	return n
}

func (m *IP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovGeoip(uint64(l))
	}
	return n
}

func sovGeoip(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGeoip(x uint64) (n int) {
	return sovGeoip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GeoInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeoip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeoip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeoip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGeoip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeoip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeoip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGeoip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeoip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeoip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGeoip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Province = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeoip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeoip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGeoip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeoip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeoip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGeoip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeoip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeoip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGeoip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Isp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeoip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGeoip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeoip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeoip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeoip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeoip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeoip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGeoip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeoip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeoip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeoip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGeoip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGeoip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeoip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeoip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGeoip
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGeoip
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGeoip
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGeoip        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGeoip          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGeoip = fmt.Errorf("proto: unexpected end of group")
)
